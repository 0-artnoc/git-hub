#!/bin/bash
#
# git-hub: Use the GitHub v3 API commands from git
#
# Copyright (c) 2013 Ingy döt Net

set -e

GIT_HUB_VERSION=0.0.1

OPTIONS_SPEC="\
git hub <command> <options> <arguments>

Commands:
  config, config-unset
  token-list, token-create, token-delete
  scope-list, scope-add, scope-remove

  user-info, user-update
  repo-list, repo-info, repo-fork, repo-create, repo-edit, repo-delete
  repo-stars, repo-star, repo-unstar, user-starred
  collab-list, collab-add, collab-remove
  user-followers, user-following, user-follow, user-unfollow

See 'git help hub' for complete documentation and usage of each command.

Options:
--
user=       GitHub user name
repo=       GitHub repository name
token=      GitHub v3 API Authentication Token
c,count=    Number of list items to show
a,all       Show all list items
U,use-auth  Force the use of authentication. (Get around rate limits)

h,help      Show this help
q,quiet     Show minimal output
v,verbose   Show verbose output
d,dryrun    Don't run the API command
T           Show API token in the verbose output
 
O           dev - Show response output
H           dev - Show reponse headers
J           dev - Show parsed JSON response
x           dev - Turn on Bash trace (set -x) output
R           dev - Repeat last command without contacting server
"

#------------------------------------------------------------------------------
main() {
	assert-env
	get-options "$@"
	setup-env

	! callable github-"$command" &&
		die "Unknown 'git hub' command: '$command'"
	github-"$command" "$@"
	[ -n "$show_headers" ] && cat $GIT_HUB_HEADER
	[ -n "$show_output" ] && cat $GIT_HUB_OUTPUT
	[ -s $GIT_HUB_OUTPUT ] && json-load-cache "$(< $GIT_HUB_OUTPUT)"
	[ -n "$json_prune_regex" ] && json-prune-cache "$json_prune_regex"
	[ -n "$show_json" ] && echo "$json_load_data_cache"

	if OK; then
		if callable "success-$command"; then
			"success-$command"
		else
			say ${message_success:-"'git hub $command' successful"}
		fi
		exit 0
	elif [ -n "$status_code" ] && callable "status-$status_code-$command"; then
		"status-$status_code-$command"
		exit 1
	elif [ -n "$(eval "echo \$message_$status_code")" ]; then
		say $(eval "echo \$message_$status_code")
		exit 1
	elif callable "failure-$command"; then
		"failure-$command"
		exit 1
	else
		say ${message_failure:="'git hub $command' failed: $status_code $ERROR"}
		exit 1
	fi
}

#------------------------------------------------------------------------------
# `git hub` command functions:
#------------------------------------------------------------------------------
github-config() {
    get-args config_key config_value
	message_success=' '
	if [ -z "$config_key" ]; then
		cat $config_file
	elif [ -z "$config_value" ]; then
		git config -f $config_file github.$config_key
	else
		message_success="$config_key=$config_value"
		git config -f $config_file github.$config_key "$config_value"
	fi
	OK=$?
}

github-config-unset() {
    get-args config_key
	[ -n "$config_key" ] ||
		die "This command requires a config key"
	git config -f $config_file --unset github.$config_key
	OK=$?
	message_success="Config key '$config_key' has been unset."
}

github-token-list() {
	basic_auth="1"
	api-get '/authorizations'
}

# XXX - Can have more than 10 tokens
success-token-list() {
	local i=0
	while true; do
		local token=$(json-get "/$i/token")
		[ -z "$token" ] && break
		local id=$(json-get "/$i/id")
		local note=$(json-get "/$i/note")
		local name=$(json-get "/$i/app/name")
		: $((i++))
		printf "%d) %s %-14s  %s\n" $i $token "(id: $id)" "${note:-$name}"
	done
}

github-token-create() {
	get-args note
	if [ -n "$note" ]; then
		json=$(json-dump-object "note" "$note")
	else
		json='{}'
	fi
	basic_auth="1"
	api-post '/authorizations' "$json"
}

success-token-create() {
	local token=$(json-get "/token")
	[ -n "$token" ] || die "Can't figure out token value"
	local id=$(json-get "/id")
	local note=$(json-get "/note")
	local name=$(json-get "/app/name")
	printf "Token created: %s %-14s  %s\n" $token "(id: $id)" "${note:-$name}"
}

github-token-delete() {
    get-args id
	[ -z "$id" ] && die "Command requires token id"
	basic_auth="1"
	api-delete "/authorizations/$id"
	message_success="Token '$id' deleted"
}

github-scope-list() {
	get-args id
	require-value token-id "$id"
	basic_auth="1"
	api-get "/authorizations/$id"
}

success-scope-list() {
	local i=0
	local scopes
	while true; do
		scope=$(json-get "/scopes/$i")
		[ -z "$scope" ] && break
		scopes+=($scope)
		: $((i++))
	done
	echo
	echo "The current scopes for token-id:$token_id are:"
	echo "  ${scopes[*]}"
	cat <<eos

Available scopes are:
  user          Read/write access to profile info only.
  user:email    Read access to a user’s email addresses.
  user:follow   Access to follow or unfollow other users.
  public_repo   Read/write access to public repos and organizations.
  repo          Read/write access to public and private repos and orgs.
  repo:status   Read/write access to public and private repo commit statuses.
  delete_repo   Delete access to adminable repositories.
  notifications Read access to a user’s notifications.
  gist          Write access to gists.

For more info, see: http://developer.github.com/v3/oauth/#scopes
eos
}

github-scope-add() {
	get-args id *scopes
	require-value token-id "$id"
	basic_auth="1"
	local array=$(json-dump-array ${scopes[*]})
	local json=$(json-dump-object add_scopes "$array")
	api-patch "/authorizations/$id" "$json"
	message_success="Scopes added."
}

github-scope-remove() {
	get-args id *scopes
	require-value token-id "$id"
	basic_auth="1"
	local array=$(json-dump-array ${scopes[*]})
	local json=$(json-dump-object remove_scopes "$array")
	api-patch "/authorizations/$id" "$json"
	message_success="Scopes removed"
}

github-user-info() {
    get-args user
	fetch-value user-name "$user"
	: ${user_name:=$login}
	api-get "/users/$user_name"
}

success-user-info() {
	for field in \
		login type name email blog location company bio \
		followers following public_repos public_gists
	do
		report-value $field
	done
}

github-user-update() {
	require-value api-token "$token"
	get-args *key_value_pairs
	api-patch "/user" "$(json-dump-object-pairs)"
}

github-repo-list() {
    get-args user
	fetch-value user-name "$user"
	: ${user_name:=$login}

	json_prune_regex='^/[0-9]+/(full_name|pushed_at|description)'
	list-setup 10
	api-get "/users/$user_name/repos?sort=pushed;per_page=$per_page"
}

success-repo-list() {
    process-list report-repo-list
}

report-repo-list() {
	name=$(json-get "/$1/full_name")
	[ -z "$name" ] && return 1
	pushed=$(json-get "/$1/pushed_at")
	pushed=${pushed/T*/}
	desc=$(json-get "/$1/description")
	printf "%3d) (%s)  %-30s %s\n" $list_counter $pushed $name "$desc"
	return 0
}

github-repo-info() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "${user:-$login}"
	api-get "/repos/$user_name/$repo_name"
}

success-repo-info() {
	for field in \
		full_name description homepage language \
		pushed_at \
		html_url ssh_url \
		forks watchers open_issues
	do
		report-value $field
	done
}

github-repo-fork() {
	get-args user_repo
	check-user-repo "$user_repo"
	require-value repo-name "$repo"
	require-value user-name "$user"
	api-post "/repos/$user_name/$repo_name/forks" '{}'
}

# TODO Support creating repo under an org
github-repo-create() {
	get-args repo
	require-value repo-name "$repo"
	require-value api-token "$token"
	api-post "/user/repos" $(json-dump-object 'name' $repo_name)
	message_success="Repository '$repo_name' created."
	message_422="Repository name '$repo_name' already exists."
}

github-repo-edit() {
	get-args *key_value_pairs
	require-value repo-name "$repo"
	require-value user-name "$login"    # TODO should be login or org
	require-value api-token "$token"
	key_value_pairs+=(name "$repo_name")
	api-patch "/repos/$user_name/$repo_name" "$(json-dump-object-pairs)"
}

github-repo-delete() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "$login"    # TODO should be login or org
	require-value api-token "$token"
	api-delete "/repos/$user_name/$repo_name"
	message_success="Repository '$repo_name' deleted"
}

github-repo-stars() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "${user:-$login}"
 	json_prune_regex='^/[0-9]+/(login)'
	list-setup 9999
	api-get "/repos/$user_name/$repo_name/stargazers"
}

success-repo-stars() {
    process-list report-repo-stars
	list="${stars[@]}"
	echo "$list" | fmt
}

report-repo-stars() {
	name=$(json-get "/$1/login")
	[ -z "$name" ] && return 1
	stars+=($name)
	return 0
}

github-repo-star() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "${user:-$login}"
	require-value api-token "$token"
	api-put "/user/starred/$user_name/$repo_name"
	message_success="'$user_name/$repo_name' starred"
}

github-repo-unstar() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "${user:-$login}"
	require-value api-token "$token"
	api-delete "/user/starred/$user_name/$repo_name"
	message_success="'$user_name/$repo_name' unstarred"
}

github-user-stars() {
	get-args user
	require-value user-name "${user:-$login}"
	require-value api-token "$token"
	list-setup 10
	api-get "/users/$user_name/starred?sort=updated"
}

success-user-stars() {
    process-list report-user-stars
}

report-user-stars() {
	name=$(json-get "/$ii/full_name")
	[ -z "$name" ] && return 1
	printf "%3d) %s\n" $list_counter $name
	return 0
}

github-collab-list() {
	get-args repo
	check-user-repo "$repo"
	require-value repo-name "$repo"
	require-value user-name "${user:-$login}"
 	json_prune_regex='^/[0-9]+/(login)'
	list-setup 10
	api-get "/repos/$user_name/$repo_name/collaborators"
}

success-collab-list() {
    process-list report-collab-list
}

report-collab-list() {
	name=$(json-get "/$ii/login")
	[ -z "$name" ] && return 1
	printf "%3d) %s\n" $list_counter $name
	return 0
}

github-collab-add() {
	get-args user-repo *collaborators
	require-value repo-name "$repo"
	require-value user-name "$user"
	require-value api-token "$token"
	for collab_name in ${collaborators[@]}; do
		api-put "/repos/$user_name/$repo_name/collaborators/$collab_name"
	done
}

github-collab-remove() {
	get-args user-repo *collaborators
	require-value repo-name "$repo"
	require-value user-name "$user"
	require-value api-token "$token"
	for collab_name in ${collaborators[@]}; do
		api-delete "/repos/$user_name/$repo_name/collaborators/$collab_name"
	done
}

github-user-followers() {
	get-args user
	require-value user-name "${user:-$login}"
 	json_prune_regex='^/[0-9]+/(login)'
	list-setup 50
	api-get "/users/$user_name/followers"
}

success-user-followers() {
    process-list report-user-followers
}

report-user-followers() {
	name=$(json-get "/$ii/login")
	[ -z "$name" ] && return 1
	printf "%3d) %s\n" $list_counter $name
	return 0
}

github-user-following() {
	get-args user
	require-value user-name "${user:-$login}"
 	json_prune_regex='^/[0-9]+/(login)'
	list-setup 50
	api-get "/users/$user_name/following"
}

success-user-following() {
    process-list report-user-following
}

report-user-following() {
	name=$(json-get "/$ii/login")
	[ -z "$name" ] && return 1
	printf "%3d) %s\n" $list_counter $name
	return 0
}

github-user-follow() {
	get-args user
	require-value user-name "$user"
	require-value api-token "$token"
	api-put "/user/following/$user_name"
}

github-user-unfollow() {
	get-args user
	require-value user-name "$user"
	require-value api-token "$token"
	api-delete "/user/following/$user_name"
}


#------------------------------------------------------------------------------
# API calling functions:
#------------------------------------------------------------------------------
api-get() { api-call GET "$1" "$2"; }
api-post() { api-call POST "$1" "$2"; }
api-put() { api-call PUT "$1" "$2"; }
api-patch() { api-call PATCH "$1" "$2"; }
api-delete() { api-call DELETE "$1" "$2"; }

# Build a command to make the HTTP call to the API server, make the call, and
# check the result.
api-call() {
	[ -n "$repeat_command" ] && api-repeat && return

	local action=$1
	local url=$2
	local data=$3

	fetch-value use-auth
	[ -n "$use_auth" ] && require-value api-token "$token"

	user_agent=git-hub-$GIT_HUB_VERSION
	# Cheap trick to make github pretty-print the JSON output.
	[ -n "$show_output" ] && user_agent="curl-$user_agent"

	local regex="^https?:"
	[[ "$url" =~ $regex ]] || url="$GIT_HUB_API_URI$url"

	# Build curl command in an array. This is the only way to preserve quoted
	# whitespace.
	local command=(
		curl
			--silent
			--show-error
			--request $action
		$url
	)
	[ -n "$data" ] && command+=(-d "$data")
	[ -z "$data" ] && [ "$action" = "PUT" ] && command+=(-d "$data")
	if [ -n "$basic_auth" ]; then
		command+=(-u "$login")
	else
		[ -n "$api_token" ] &&
			command+=(--header "Authorization: token $api_token")
	fi
	command+=(
		--user-agent $user_agent
		--dump-header $GIT_HUB_HEADER
		--output $GIT_HUB_OUTPUT
		--stderr $GIT_HUB_ERROR
	)

	if [ $GIT_VERBOSE ]; then
		if [ -n "$show_token" ]; then
			say "${command[@]}"
		else
			say "${command[@]/$api_token/********}"
		fi
	fi

	[ -n "$dry_run" ] && exit 0

	# Run the curl command!
	"${command[@]}"
	## Use this line for debugging the real command
	# set -x; "${command[@]}"; set +x

	check-api-call-status $?
}

check-api-call-status() {
	OK=$1
	if [ ! -f $GIT_HUB_HEADER ]; then
		OK=1
		ERROR=$(head -1 $GIT_HUB_ERROR)
		return
	fi
	status_code=$(head -1 $GIT_HUB_HEADER | cut -d ' ' -f2)
	local regex='^[0-9]{3}$'
	[[ $status_code =~ $regex ]] || return
	case "$status_code" in
		200|201|202|204) OK=0 ;;
		*)
			OK=1
			ERROR=$(head -1 $GIT_HUB_HEADER | cut -d ' ' -f3-)
			;;
	esac
}

OK() {
	return $OK
}

api-repeat() {
	check-api-call-status 0
	true
}

#------------------------------------------------------------------------------
# Argument parsing functions:
#------------------------------------------------------------------------------
get-args() {
	local slurp_index=0
    local slurp_re='^\*'
	local user_repo_re='/'
	if [[ "$1" = "user-repo" ]]; then
		if [[ ${command_arguments[0]} =~ $user_repo_re ]]; then
			check-user-repo ${command_arguments[0]}
			unset command_arguments[0]
		fi
		shift
	fi
	for arg in "${command_arguments[@]}"; do
		if [ $slurp_index -gt 0 ]; then
			eval ${1/\*/}[$slurp_index]=\"$arg\"
			: $((slurp_index++))
		elif [ $# -gt 0 ]; then
			if [[ $1 =~ $slurp_re ]]; then
				eval ${1/\*/}[$slurp_index]=\"$arg\"
				: $((slurp_index++))
			else
				eval $1=\""$arg"\"
				shift
			fi
		else
			die "Unknown argument: $arg"
		fi
	done
}

check-user-repo() {
	[[ $1 =~ "/" ]] && user-repo ${1/\// }
	true
}

user-repo() {
	user=$1
	repo=$2
}

# Usage: require-value variable-name "possible-user-value"
#   Fetch $variable_name or die
require-value() {
	local key=$1
	local var=${key//-/_}
	fetch-value "$@"
	if [ -z "$(eval echo \$$var)" ]; then
		[ "$var" = "api_token" ] && die_need_api_token
		die "Can't find value for '$var'"
	fi
	true
}

# Usage: fetch-value variable-name "possible-user-value"
#   Sets $variable_name to the first of:
#   - possible-user-value
#   - $GIT_HUB_VARIABLE_NAME
#   - git config github.variable-name
fetch-value() {
	local key=$1
	local var=${key//-/_}
	local env=GIT_HUB_$(echo $var | tr 'a-z' 'A-Z')

	[ -n "$(eval echo \$$var)" ] && return
	eval $var="$2"
	[ -n "$(eval echo \$$var)" ] && return
	eval $var=\"\$$env\"
	[ -n "$(eval echo \$$var)" ] && return
	if [ "$var" = "repo_name" -o "$var" = "user_name" ]; then
		if [ -f ".git/config" ]; then
			url=$(git config --file=.git/config remote.origin.url)
			if [ -n "$url" ]; then
				local re1='github\.com'
				if [[ "$url" =~ $re1 ]]; then
					local re2='^.*[:/](.*)/(.*)\.git$'
					if [[ "$url" =~ $re2 ]]; then
						: ${user_name:="${BASH_REMATCH[1]}"}
						: ${repo_name:="${BASH_REMATCH[2]}"}
						return
					fi
				fi
			fi
		fi
	fi
	eval $var=$(git config --file=$config_file github.$key || echo '')
	[ -n "$(eval echo \$$var)" ] && return
	true
}

#------------------------------------------------------------------------------
# List processing functions:
#------------------------------------------------------------------------------
list-setup() {
	: ${list_size:=$1}
	page_size=${2:-30}
	list_counter=1
	per_page=$list_size
	[ $per_page -gt $page_size ] && per_page=$page_size
	true
}

process-list() {
	callback="$1"
	for ((ii=0; ii < $page_size; ii++)); do
		[ $list_counter -gt $list_size ] && return 0
		$callback $ii || return 0
		: $((list_counter++))
	done
	get-next-page process-list $callback
}

get-next-page() {
	regexp='Link: <(https:.+?)>; rel="next"'
	[[ "$(< $GIT_HUB_HEADER)" =~ $regexp ]] || return
	local link=${BASH_REMATCH[1]}
	api-get "$link"
	if OK; then
		json-load-cache "$(< $GIT_HUB_OUTPUT)"
		$1 $2
	fi
}

#------------------------------------------------------------------------------
# Detailed error messages:
#------------------------------------------------------------------------------
die_need_api_token() {
	cat <<eos

Can't determine your Personal API Access Token, which is required by this
command. Usually you put your token into the ~/.githubconfig file, like this:

	git hub config api-token <your-personal-api-access-token>

To create a new token or get get your value, got to
https://github.com/settings/applications. This is a 40 digit hexadecimal
character string.

You can also specify the token using the --token= commandline option, or via
the GIT_HUB_API_TOKEN environment variable.

eos
	die
}

die_config_not_setup() {
	cat <<eos

To use the 'git hub' command, you need a '~/.githubconfig' file, and it needs
to contain at least your login id. You can set this by running the following
command:

	git hub config login <your-github-login-id>

eos
	die
}

die_user_name_in_config() {
	cat <<eos

It looks like your ~/.githubconfig has a 'user-name' key in it. This key has
been renamed 'login'. You need to fix the config file. Please run these
commands:

	git hub config-unset user-name
	git hub config login <your-github-login-id>

eos
	die
}

#------------------------------------------------------------------------------
# JSON support functions:
#------------------------------------------------------------------------------
# Format a JSON object from an input list of key/value pairs.
json-dump-object() {
	local json='{'
	local regex='^\['
	while [ $# -gt 0 ]; do
		if [[ "$2" =~ $regex ]]; then
			json="$json\"$1\":$2"
		else
			json="$json\"$1\":\"$2\""
		fi
		shift; shift
		if [ $# -gt 0 ]; then
			json="$json,"
		fi
	done
	json="$json}"
	echo $json
}

json-dump-array() {
	local json='['
	while [ $# -gt 0 ]; do
		json="$json\"$1\""
		shift
		if [ $# -gt 0 ]; then
			json="$json,"
		fi
	done
	json="$json]"
	echo "$json"
}

# Format a JSON object from an array.
json-dump-object-pairs() {
	local json='{'
	for ((i = 0; i < ${#key_value_pairs[@]}; i = i+2)); do
		local value=${key_value_pairs[$((i+1))]}
		json="$json\"${key_value_pairs[$i]}\":\"$value\""
		if [ $((${#key_value_pairs[@]} - $i)) -gt 2 ]; then
			json="$json,"
		fi
	done
	json="$json}"
	echo $json
}

json-load-cache() {
	json_load_data_cache=$(echo "$1" | tokenize | parse)
}

json-prune-cache() {
	json_load_data_cache=$(echo "$json_load_data_cache" | grep -E "$1")
}

json-get() {
	local key="^$1[[:space:]]"
	local data="$2"
	[ -z "$data" ] && data="$json_load_data_cache"
	value=$(echo "$data" | grep -E --max-count=1 "$key" | cut -f2)
	if [ "$value" = 'null' ]; then
		echo ''
	else
		echo ${value//\"/}
	fi
}

#------------------------------------------------------------------------------
# Report formatting functions:
#------------------------------------------------------------------------------
report-value() {
	local value=$(json-get "/$1")
	local label=$(eval echo \$label_$1)
	if [ -z "$label" ]; then
		label=$(echo "$1" | tr '_' ' ')
		label=$(for word in $label; do title=`echo "${word:0:1}" | tr a-z A-Z`${word:1}; echo -n "$title "; done)
	fi
	if [ -n "$label" -a -n "$value" ]; then
		if [ ${#value} -lt 80 ]; then
			printf "%-15s %s\n" "$label" "$value"
		else
			value=${value//\\r\\n\\r\\n/\\n\\n  }
			printf "$label\n"
			printf "  $value" | fmt
		fi
	fi
}

label_blog='Web Site'
label_watchers='Stars'
label_homepage='Web Site'
label_html_url='GitHub Page'
label_ssh_url='Remote URL'

#------------------------------------------------------------------------------
# Initial setup functions:
#------------------------------------------------------------------------------
assert-env() {
	GIT_CORE_PATH=$(git --exec-path) || exit $?
	PATH=$GIT_CORE_PATH:$PATH

	: ${GIT_HUB_API_URI:=https://api.github.com}
	: ${GIT_HUB_TMP_DIR:=/tmp}
	GIT_HUB_TMP_PREFIX=$GIT_HUB_TMP_DIR/git-hub
	GIT_HUB_INPUT=$GIT_HUB_TMP_PREFIX-in-$$
	GIT_HUB_OUTPUT=$GIT_HUB_TMP_PREFIX-out-$$
	GIT_HUB_ERROR=$GIT_HUB_TMP_PREFIX-err-$$
	GIT_HUB_HEADER=$GIT_HUB_TMP_PREFIX-head-$$
	local cmd
	for cmd in curl cut git grep head tr; do
		[ -z "$(which $cmd)" ] &&
			echo "Required command not found: '$cmd'" && exit 1
	done
	[ -z "$HOME" ] &&
		echo "Cannot determine HOME directory" && exit 1
	config_file=$GIT_HUB_CONFIG
	[ -n "$config_file" ] || config_file=$HOME/.githubconfig
}

get-options() {
	[ $# -eq 0 ] && set -- --help
	NONGIT_OK=1 source git-sh-setup

	user=; repo=; token=; list_size=
	GIT_QUIET=; GIT_VERBOSE=; show_token=
	dry_run=; repeat_command=
	show_output=; show_headers=; show_json=
	while [ $# -gt 0 ]; do
		local option="$1"; shift
		case "$option" in
			--user) user="$1"; shift ;;
			--repo) repo="$1"; shift ;;
			--token) token="$1"; shift ;;
			-c)	list_size=$1; shift ;;
			-a) list_size=999999 ;;
			-U) use_auth="1" ;;

			-h) usage ;;
			-q) GIT_QUIET="1"
				GIT_VERBOSE=
				;;
			-v) GIT_VERBOSE="1"
				GIT_QUIET=
				;;
			-d) dry_run="1" ;;
			-T) show_token="1"
				GIT_VERBOSE="1"
				;;

			--) break ;;

			# Dev options:
			-O) show_output="1" ;;
			-H) show_headers="1" ;;
			-J) show_json="1" ;;
			-x) set -x ;;
			-R) repeat_command="1" ;;

			*) die "Unexpected option: $option" ;;
		esac
	done

    command="$1"; shift
	# Some common command aliases:
	[ "$command" = "user" ] && command="user-info"
	[ "$command" = "repos" ] && command="repo-list"
	[ "$command" = "repo" ] && command="repo-info"
	[ "$command" = "fork" ] && command="repo-fork"
	[ "$command" = "stars" ] && command="repo-stars"
	[ "$command" = "star" ] && command="repo-star"
	[ "$command" = "unstar" ] && command="repo-unstar"
	[ "$command" = "collabs" ] && command="collab-list"
	[ "$command" = "followers" ] && command="user-followers"
	[ "$command" = "following" ] && command="user-following"
	[ "$command" = "follow" ] && command="user-follow"
	[ "$command" = "unfollow" ] && command="user-unfollow"

	command_arguments=("$@")
}

setup-env() {
    [ "$command" = "config" -o "$command" = "config-unset" ] || check_config

    source "$GIT_CORE_PATH/git-hub./json.bash"
    if [ -n "$repeat_command" ]; then
		[ -f $GIT_HUB_TMP_PREFIX-out-* ] ||
			die "No previous 'git hub' command to repeat"
		local old_output=$(echo $GIT_HUB_TMP_PREFIX-out-*)
		local pid=${old_output/$GIT_HUB_TMP_PREFIX-out-/}
		GIT_HUB_INPUT=$GIT_HUB_TMP_PREFIX-in-$pid
		GIT_HUB_OUTPUT=$GIT_HUB_TMP_PREFIX-out-$pid
		GIT_HUB_ERROR=$GIT_HUB_TMP_PREFIX-err-$pid
		GIT_HUB_HEADER=$GIT_HUB_TMP_PREFIX-head-$pid
	else
		rm -f $GIT_HUB_TMP_PREFIX-*
	fi
	[ -n "$dry_run" ] &&
		say '*** NOTE: This is a dry run only. ***'
	true
}

check_config() {
	[ -f "$config_file" ] || die_config_not_setup
	[ -n "$(git config -f $config_file github.user-name)" ] &&
		die_user_name_in_config
	login="$(git config -f $config_file github.login)"
	[ -n "$login" ] || die_config_not_setup
}

#------------------------------------------------------------------------------
# General purpose functions:
#------------------------------------------------------------------------------

# Check if a function exists:
callable() {
	[ -n "$(type $1 2> /dev/null)" ]
}

# This command is provided by `git-sh-setup` but is missing in older versions.
# Repeating it here for now:
say () {
	if test -z "$GIT_QUIET"
	then
		printf '%s\n' "$*"
	fi
}

#------------------------------------------------------------------------------
# Begin at the end!
#------------------------------------------------------------------------------
main "$@"

# vim: set tabstop=4 shiftwidth=4 noexpandtab:
