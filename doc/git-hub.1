'\" t
.\"     Title: git-hub
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 07/25/2013
.\"    Manual: Git Manual
.\"    Source: Git 1.7.9.5
.\"  Language: English
.\"
.TH "GIT\-HUB" "1" "07/25/2013" "Git 1\&.7\&.9\&.5" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-hub \- Do GitHub operations from git
.SH "SYNOPSIS"
.sp
.nf
\fIgit hub\fR                             # Show the cheat sheet
\fIgit help hub\fR                        # Show this awesome documentation
\fIgit hub\fR config login <your\-github\-login\-id>  # Do this first!
\fIgit hub\fR user\-info <user\-name>       # Get info about a user
\fIgit hub\fR repo\-list <user\-name>       # List recent repositories
\fIgit hub\fR repo\-create <repo\-name>     # Create a new repository
\fIgit hub\fR repo\-edit \-\-repo=<repo\-name> description \fIJust another GitHub repo\fR
\fIgit hub\fR repo\-delete <repo\-name>     # Delete a repository
\fIgit hub\fR collab\-add <user\-names>     # Add collaborators to repo
.fi
.SH "DESCRIPTION"
.sp
The \fBhub\fR subcommand for git, allows you do perform many of the operations made available by GitHub\(cqs v3 REST API, from the git commandline command\&.
.sp
You can create delete and modify repositories\&. You can get information about repositories and users\&. The API is quite extensive\&. With this command you can do many of your day to day GitHub actions without needing a web browser\&.
.SH "INSTALLATION"
.sp
Just run (possibly with sudo):
.sp
.if n \{\
.RS 4
.\}
.nf
make install
.fi
.if n \{\
.RE
.\}
.sp
This will install git\-hub next to your other git commands\&. It will also install the git\-hub manpage so you can run theses commands for help:
.sp
.if n \{\
.RS 4
.\}
.nf
man git\-hub
git help hub
.fi
.if n \{\
.RE
.\}
.SH "CONFIGURATION"
.sp
Before using the git hub command, you will need to set a couple configuration options\&. Run these commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config login <your\-github\-login\-id>
git hub config api\-token <your\-github\-api\-token>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
If you don\(cqt know what your API token is, see the next section\&.
.sp .5v
.RE
.sp
These values will be stored in ~/\&.githubconfig, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[github]
        login = <your\-github\-id>
        api\-token = <your\-github\-api\-token>
.fi
.if n \{\
.RE
.\}
.sp
You can edit this file by hand or use the git hub config command\&.
.SH "AUTHENTICATION"
.sp
Many end points of the GitHub v3 API require a Personal API Access Token\&. You can list your current tokens with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub token\-list
.fi
.if n \{\
.RE
.\}
.sp
If you don\(cqt have any tokens or want a new one for the git\-hub command, run these commands:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub token\-create
git hub scope\-add <token\-id> user repo
git hub scope\-list <token\-id>
.fi
.if n \{\
.RE
.\}
.sp
You can also see all your tokens on the web at \m[blue]\fBthis page\fR\m[]\&\s-2\u[1]\d\s+2\&.
.sp
You can specify your API token to git hub on the commandline with \-\-token=\&.\&.\&. or in the GIT_HUB_API_TOKEN environment variable, but the easiest thing to do is just set it in the git\-hub config\&.
.sp
Certain token scopes are required for various GitHub API operations\&. Make sure your token has the scopes turned on for the things you want to do\&. See the scope\-list, scope\-add and scope\-remove git hub subcommands\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
All the git hub commands dealing with tokens and scopes require you to enter your GitHub password\&.
.sp .5v
.RE
.SH "RATE LIMITS"
.sp
GitHUb limits unauthenticated API calls to 60 per hour, and authenticated API calls to 5000 per hour\&. For this reason you may wish to use authentication even for calls that don\(cqt need it\&. You can use the \-a/\-\-use\-auth option to make sure a command uses authentication\&. You can also set the config file to always use authentication, with this command:
.sp
.if n \{\
.RS 4
.\}
.nf
git hub config use\-auth 1
.fi
.if n \{\
.RE
.\}
.sp
Another option is to set the GIT_HUB_USE_AUTH environment variable:
.sp
.if n \{\
.RS 4
.\}
.nf
export GIT_HUB_USE_AUTH=1
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.sp
The git hub command gets its input values from these sources (in this order):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commandline
\fBarguments\fR
(see specific command, below)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Commandline
\fBoptions\fR
(outlined in this section)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Environment variables of the form
GIT_HUB_VARIABLE_NAME\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\&./\&.git/config
file\&. (The repo you are issuing commands from)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
~/\&.githubconfig
file\&.
.RE
.sp
When your current directory is a git repo, and the origin remote contains github\&.com, any commands that need a user\-name and/or repo\-name will use the values found in that remote, by default\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Many commands need either a user\-name, a repo\-name or both\&. To refer to another user\(cqs repo, you can often use the combined form of user\-name/repo\-name as a command argument\&.
.sp .5v
.RE
.sp
Commandline options start with a dash and can appear in any order in the command\&.
.PP
\-\-user=<user\-name>
.RS 4
Set or override the user\-name required by the command\&. This value can also come from the
GIT_HUB_USER_NAME
environment variable, or the config file of the git repo for your current working directory\&.
.RE
.PP
\-\-repo=<repo\-name>
.RS 4
Set or override the repo\-name required by the command\&. This value can also come from the
GIT_HUB_REPO_NAME
environment variable, or the config file of the git repo for your current working directory\&.
.RE
.PP
\-\-token=<api\-token>
.RS 4
Set or override the api\-token required by the command\&. This value can also come from the
GIT_HUB_API_TOKEN
environment variable\&. Usually this value comes from your
~/\&.githubconfig
file\&.
.RE
.PP
\-c <number>, \-\-count=<number>
.RS 4
This option is for commands that return a list of things\&. Specify the number of items you want the command to return\&. Each list command has a reasonable default value\&.
.RE
.PP
\-q, \-\-quiet
.RS 4
Show minimal output\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
Show detailed output\&.
.RE
.PP
\-d, \-\-dryrun
.RS 4
Don\(cqt actually make the API call\&. This option turns on verbose mode\&.
.RE
.PP
\-T
.RS 4
Show the API token in the verbose output\&. Hidden by default\&. This option turns on verbose mode\&.
.RE
.SH "DEV OPTIONS"
.sp
There are a number of dev options that will give you lots of extra information (albeit in a less readable form)\&.
.PP
\-O
.RS 4
Show the API reponse output\&. Always in JSON format\&. JSON is pretty\-printed\&.
.RE
.PP
\-H
.RS 4
Show the API response headers\&.
.RE
.PP
\-J
.RS 4
Show the API response JSON, in decoded form\&.
.RE
.PP
\-x
.RS 4
Turn on Bash
\-x
debugging\&. This will show every bash command executed in the program\&.
.RE
.PP
\-R
.RS 4
Repeat the last command, using the previous API server response\&. Useful for development and debugging\&. (Beware, only caches the most recent API call, so not really good for commands that make multiple calls)\&.
.RE
.SH "COMMANDS"
.PP
config [<key> [<value>]]
.RS 4
With no args, this command will print the contents of
~/\&.githubconfig\&. With one argument (a key), print the current value of the config key\&. With two arguments (key value), set the value of the config key\&. Only 2 keys are currently supported:
login
and
api\-token\&.
.RE
.sp
config\-unset <key> Unset a config key\&. Removes the key from the ~/\&.githubconfig file\&.
.PP
token\-list
.RS 4
List all the API tokens for your GitHub login id\&. You will need to enter the password for you GitHub login id\&.
.RE
.PP
token\-create [<description\-string>]
.RS 4
Create a new API token for your GitHub login id\&. You will need to enter the password for you GitHub login id\&. Note: Creating a new token will not automatically add it to your
~/\&.githubconfig
file; you need to do that yourself with the
git hub config api\-token <token\-value>
command\&.
.RE
.PP
token\-delete <api\-token\-id>
.RS 4
Delete one of your API tokens for your GitHub login id\&. You will need to enter the password for you GitHub login id\&. Note: You need to delete tokens by
\fBid\fR
(listed by the
token\-list
command), not by token value\&.
.RE
.PP
scope\-list <api\-token\-id>
.RS 4
List the scopes assigned to your API token, and also list all the possible scope values that you can assign\&. You will need to enter the password for you GitHub login id\&.
.RE
.PP
scope\-add <api\-token\-id> <scope\-name>\&...
.RS 4
Add one or more scopes to your API token\&. You will need to enter the password for you GitHub login id\&.
.RE
.PP
scope\-remove <api\-token\-id> <scope\-name>\&...
.RS 4
Remove one or more scopes from your API token\&. You will need to enter the password for you GitHub login id\&.
.RE
.PP
user\-info [<user\-name>]
.RS 4
This command will show basic information about a specific user\&. User defaults to the owner of the current repo, or your login if you are not inside a repo directory\&.
\fBAlias\fR:
user\&.
.RE
.sp
user\-update <key\-value\-pair>\&... [\-\-user=<user\-name>] Set specific fields to new values\&. You list the parameters as key/value pairs\&.
.PP
repo\-list [<user\-name>]
.RS 4
List the repos for a user\&. List is returned in order of recent activity\&.
\fBAlias\fR:
repos\&.
.RE
.PP
repo\-info [<repo\-name>]
.RS 4
This command will show basic information about a specific repository\&.
\fBAlias\fR:
repo\&.
.RE
.PP
repo\-create <repo\-name>
.RS 4
Create a new GitHub repository\&.
.RE
.PP
repo\-edit [<user>/<repo>] <key\-value\-pair>\&...
.RS 4
Set specific fields to new values\&. You list the parameters as key/value pairs\&.
.RE
.PP
repo\-delete <repo\-name>
.RS 4
Delete a GitHub repository\&.
.RE
.PP
repo\-stars <user\-name>/<repo\-name>
.RS 4
Show what users have starred a repository\&.
\fBAlias\fR:
stars
.RE
.PP
repo\-star <user\-name>/<repo\-name>
.RS 4
Add your
\fBstar\fR
to a repository\&.
\fBAlias\fR:
star
.RE
.PP
repo\-unstar <user\-name>/<repo\-name>
.RS 4
Add your
\fBstar\fR
to a repository\&.
\fBAlias\fR:
unstar
.RE
.PP
user\-starred [<user\-name>]
.RS 4
Show repositories that a user has starred\&.
.RE
.PP
collab\-list [<user\-name>/<repo\-name>]
.RS 4
List current collaborators for a repository\&.
\fBAlias\fR:
collabs
.RE
.PP
collab\-add [<user\-name>/<repo\-name>] <collab\-name>\&...
.RS 4
Add one or more collaborators to a repository\&.
.RE
.PP
collab\-remove [<user\-name>/<repo\-name>] <collab\-name>\&...
.RS 4
Remove one or more collaborators from a repository\&.
.RE
.PP
user\-followers [<user\-name>]
.RS 4
List the people who are following a user\&.
\fBAlias\fR:
followers\&.
.RE
.PP
user\-following [<user\-name>]
.RS 4
List the people that a user is following\&.
\fBAlias\fR:
following\&.
.RE
.PP
user\-follow <user\-name>
.RS 4
Follow another user\&.
\fBAlias\fR:
follow\&.
.RE
.PP
user\-unfollow <user\-name>
.RS 4
Stop following a user\&.
\fBAlias\fR:
unfollow\&.
.RE
.SH "EXAMPLE 1. CREATE A NEW REPO AND GITHUB ORIGIN"
.sp
Do everything from the command line:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir foo
$ cd foo
$ echo \*(AqThe new foo\*(Aq > README
$ git init
$ git add README
$ git commit \-m \*(AqFirst commit\*(Aq
$ git hub repo\-create foo
$ git hub repo\-info foo
$ git remote add origin <new\-remote\-address>
$ git push origin master
$ git hub repo\-edit \e
    description \*(AqThe new foo\*(Aq \e
    homepage http://example\&.com
$ git hub repo\-info
.fi
.if n \{\
.RE
.\}
.sp
Note that on the last two commands you don\(cqt need to set the <repo\-name> because it can be gleaned from the remote\&. Also on the repo\-edit command notice how you can specify multiple key/value pairs\&.
.SH "EXAMPLE 2. COMMANDS FROM WITHIN A REPO"
.sp
Assume your current working directory is not a repo:
.sp
.if n \{\
.RS 4
.\}
.nf
$ # This command will list *your* repos:
$ git repos
$ # Clone someone else\*(Aqs repo:
$ git clone git@github\&.com:tomas/skull\&.git
$ # cd into it:
$ cd skull
$ # This command will show tomas\*(Aq recent repos:
$ git repos
$ # This command will show info about tomas/skull:
$ git repo
.fi
.if n \{\
.RE
.\}
.sp
The git hub command tries to be environmentally aware\&. If you are in a GitHub cloned repo directory, and you don\(cqt specify a user\-name or repo\-name, then they will be pulled from the remote url\&. Otherwise, if you don\(cqt specify a user\-name it will use the one (presumably yours) that you set with the git hub config command\&.
.SH "AUTHOR"
.sp
Written by Ingy d\(:ot Net <\m[blue]\fBingy@ingy\&.net\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "STATUS"
.sp
This command is still in early development\&. Only the basic commands have been supported, but the plan is to support as much of the API as possible\&. Patches / Pull Requests welcome\&.
.sp
There are rudimentary tests in place but testing is not yet extensive\&. Expect more testing soon\&. Also please include tests\-in\-kind for any patches you submit\&.
.sp
This command is attempting to follow the guidelines for git command development, so that it may one day be a standard command for git\&.
.sp
Find \fIingy\fR on irc\&.freenode\&.net if you have questions or ideas\&.
.SH "NOTES"
.IP " 1." 4
this page
.RS 4
\%https://github.com/settings/applications
.RE
.IP " 2." 4
ingy@ingy.net
.RS 4
\%mailto:ingy@ingy.net
.RE
