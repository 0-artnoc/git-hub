git-hub(1)
==========

NAME
----
git-hub - Access GitHub v3 API from git

SYNOPSIS
--------
[verse]
'git hub' user-info <user-name>       # Get info about a user
'git hub' repo-list <user-name>       # List recent repositories
'git hub' repo-create <repo-name>     # Create a new repository
'git hub' repo-delete <repo-name>     # Delete a repository
'git hub' collab-add <user-names>     # Add collaborators to repo

DESCRIPTION
-----------

The *hub* subcommand for git, allows you do perform many of the operations
made available by GitHub's v3 REST API, from the `git` commandline command.

You can create delete and modify repositories. You can get information about
repositories and users. The API is quite extensive. With this command you can
do many of your day to day GitHub actions without needing a web browser.

INSTALLATION
------------

Just run:

    make install

That will install `git-hub` next to your other `git` commands. You will likely
need sudo permissions to install this.

To install the documentation, run:

    make install-doc

Doc installation requires the `asciidoc` toolchain.

To install everything, run:

    make install-all

CONFIGURATION
-------------

Before using the `git hub` command, you will need to set a couple
configuration options. Run these commands:

    git hub config user-name <your-github-login-id>
    git hub config api-token <your-github-api-token>

[NOTE]
If you don't know what your API token is, see the next section.

These values will be stored in `~/.githubconfig`, like this:

    [github]
            api-token = <oauth2-api-token**********************>
            user-name = <your-github-id>

You can edit this file by hand or use the `git hub config` command.

AUTHENTICATION
--------------

The GitHub v3 API requires a Personal API Access Token. You can generate
these tokens by visiting
https://github.com/settings/applications[this page].

All your `git hub` commands will require a token. You can specify the token
on the commandline with `--token=...` or in the `GIT_HUB_API_TOKEN`
environment variable, but the easiest thing to do is just set it in the
git-hub config.

Note that auth tokens have **scopes**. Various scopes are required for
various GitHub API operations. Make sure your token has the scopes turned on
for the things you want to do.

OPTIONS
-------

[NOTE]
Many commands need either a user-name, a repo-name or both. To refer to
another user's repo, you can often use the combined form of
`user-name/repo-name`.

--user=<user-name>::
    Set or override the user-name required by the command. This value can
    also come from the `.githubconfig` file, or the `GIT_HUB_USER_NAME`
    environment variable.

--repo=<repo-name>::
    Set or override the repo-name required by the command. This value can
    also come from the `GIT_HUB_REPO_NAME` environment variable, or the
    config file of the git repo for your current working directory.

--token=<api-token>::
    Set or override the api-token required by the command. This value can
    also come from the `GIT_HUB_API_TOKEN` environment variable.

-c <number>::
--count=<number>::
    Specify the number of items you want the command to return. The default
    is 10.

-q::
--quiet::
    Show minimal output.

-v::
--verbose::
    Show detailed output.

-d::
--dryrun::
    Don't actually make the API call.

-T::
    Show the API token in the verbose output. Hidden by default.

COMMANDS
--------
user-info [<user-name>]::
    This command will show basic information about a specific user.

repo-list [<user-name>]::
    List the repos for a user. List is returned in order of recent activity.

repo-info [<repo-name>]::
    This command will show basic information about a specific repository.

repo-create <repo-name>::
    Create a new GitHub repository.

repo-delete <repo-name>::
    Delete a GitHub repository.

ALIASES
-------
Some of the common commands have shorter aliases.

user::
    Alias for `user-info`.

repos::
    Alias for `repo-list`.

repo::
    Alias for `repo-info`.

EXAMPLE 1. Create a new repo and GitHub origin
----------------------------------------------
Do everything from the command line:

    $ mkdir foo
    $ cd foo
    $ echo 'The new foo' > README
    $ git init
    $ git add README
    $ git commit -m 'First commit'
    $ git hub repo-create foo
    $ git remote add origin <new-remote-address>
    $ git hub repo-set description 'The new foo'
    $ git hub repo-set url http://example.com

Note that on the last 2 commands you don't need to set the <repo-name>
because it can be gleaned from the remote.

AUTHOR
------
Written by Ingy d√∂t Net <ingy@ingy.net>
